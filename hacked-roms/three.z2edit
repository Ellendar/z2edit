######################################################################
#
# z2edit script to create an extra overworlds + extra palaces hack
#
######################################################################
set ibase 16

# Adjust the src pointer of RAM overworld maps to $7a00
# The instruction encoded here is "lda #$7a"
wbp b=0 87f7 a9 7a

# Adjust overworld vertical size from 75 to 96
# This adjusts the height comparison: "cmp #$60"
wbp b=0 8824 c9 60
wbp b=0 8922 c9 60
wbp b=0 8c29 c9 60
wbp b=1 83dc c9 60
wbp b=2 83dc c9 60

# Fix the set_bank7 routine in every bank.  We're going to move bank 7
# to bank 15.
# The instruction encoded here is "lda #$0f"
wbp b=0 bf95 a9 0f
wbp b=1 bf95 a9 0f
wbp b=2 bf95 a9 0f
wbp b=3 bf95 a9 0f
wbp b=4 bf95 a9 0f
wbp b=5 bf95 a9 0f
wbp b=6 bf95 a9 0f
wbp b=7 bf95 a9 0f

# Disable turning palaces to stone, since z2edit currently doesn't support
# editing this data.
wbp b=1 8797 ff ff ff ff
wbp b=2 8797 ff ff ff ff

# Insert 8 empty PRG banks at bank 7, thus moving the real bank 7 to bank 15
insertprg 7
insertprg 7
insertprg 7
insertprg 7
insertprg 7
insertprg 7
insertprg 7
insertprg 7

set ibase 10
# Copy PRG bank 2 to bank 14 (extra overworld)
copyprg 2 14
# Copy PRG bank 4 into bank 13 (extra palaces, worlds 6 and 7)
copyprg 4 13
# Copy CHR banks 4 and 5 into 28 and 29
copychr 4 28
copychr 5 29


set ibase 16
set bank f
######################################################################
# These memmoves move some jump tables into the some of the freespace
# areas in bank 15 (nee bank 7) so they can be extended to handle the
# extra worlds.
######################################################################
# Update the per-world tile build jumptable (I think?)
memmove b=f ff4c c819 12
memmove b=f ff5e c825 4
wbp c781 4c ff
# Update the per-world object small construction routine+table
memmove b=f feaa c927 15
memmove b=f febf c936 4
wbp c907 aa fe
# Update the per-world object construction routine+table
memmove b=f c927 c921 4
wbp c92b ff ff ff ff ff
wbp c930 ff ff ff ff ff ff ff ff ff ff ff ff

######################################################################
# Enter assembly mode in bank 15 (nee bank 7) and rewrite some code
# for memory copies and destination tables.
######################################################################
asm 0
; Set up the src pointer for overworld transfers to be consistent with
; our new copy loop
.org $cd91
        STA $02
.org $cd96
        STA $03

.org $cd98
        JMP copy_overworld_destinations
copy_half_paragraphs:
; Copy X-reg number of half-paragraphs from ($02/03) to ($20/21).
        LDY #$00
copybyte1:
        LDA ($02),Y             ; load data from src pointer
        STA ($20),Y             ; store at dst pointer
        INY                     ; increment loop counter
        BPL copybyte1           ; copied 128 bytes yet?
        DEX                     ; decrement number of half-paragraphs
        BEQ copydone            ; all done?
copybyte2:
        LDA ($02),Y             ; load data from src pointer
        STA ($20),Y             ; store at dst pointer
        INY                     ; increment loop counter
        BNE copybyte2           ; copied 256 bytes yet?
        INC $03                 ; increment src hi-byte
        INC $21                 ; increment dst hi-byte
        DEX                     ; decrement number of half-paragraphs
        BNE copybyte1           ; all done?
copydone:
        RTS

; Unused space - fill with ff
.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
.db $ff

copy_overworld_destinations:
        LDA #$00                ; copy overworld destinations to $6a00
        STA $20
        LDA #$6a
        STA $21
        LDX #$05                ; 5 half-paragraphs (640 bytes)
        JSR copy_half_paragraphs

copy_overworld:
        LDX $0706               ; overworld index
        LDA overworld_pointer_offset,X   ; overworld pointer offset
        TAX
        LDA $8508,X             ; overworld src pointer
        STA $02
        LDA $8509,X
        STA $03
        LDA #$7a                ; ram destination $7a00
        STA $21
        LDX #$0b                ; 11(dec) half paragraphs (1408 bytes)
        JSR copy_half_paragraphs

copy_enemy_lists:
        LDA #$a0                ; enemy lists at $88a0
        STA $02
        LDA #$88
        STA $03
        LDA #$70                ; destination $7000
        STA $21
        LDX #$08                ; 8 half paragraphs (1024 bytes)
        JSR copy_half_paragraphs

.org $cd27
overworld_pointer_offset:
.db $00,$02,$00,$00

.org $cddb
overworld_banks:
.db $01,$02,$02,$0e

.org $cd48
overworld_check_bank_switch:
        ; Prior instructions load and check current world's bank
        ; If we're not on the overworld, go immediately to bank switch
        BNE do_bank_switch
        LDY $0706                   ; Get overworld index
        CPY #$01                    ; Are we on DM/MZ
        BNE get_overworld_bank      ; No
        LDY $070a                   ; Yes, get previous overworld index
get_overworld_bank:
        LDA overworld_banks,Y       ; Load the overworld bank
do_bank_switch:
        STA $0769                   ; store it in bank-to-switch-to
        JSR $ffcc                   ; bank switch
        LDA $0769                   ; reload it
        NOP
        NOP

;
.org $c4b7
world_to_bank_table:
.db $01,$03,$03,$04,$04,$05,$0d,$0d
.org $cdcf
world_to_enemy_offset_table:
.db 0,0,0,0,2,0,0,2

; Update users of the world_to_enemy_offset_table
.org $c50c
        LDA world_to_enemy_offset_table,Y
.org $cd8a
        LDA world_to_enemy_offset_table,Y

; Fix the "type B" palace detector to recognize both worlds 4 & 7 as type B
.org $cdc6
        LDY $0707
        LDA world_to_enemy_offset_table,Y
        RTS
.org $ce7f
        JSR $cdc6
        NOP
        NOP
        BEQ #$08 ;[dest=ce8e]

; Since we have 4 overworlds now, rewrite the palace graphics table
; to use 16 bytes (ov*4 + entry id)
.org $cd2b
palace_graphics_banks:
.db $04,$05,$09,$09,$0a,$0a,$0a,$0a, $0b,$0c,$06,$09,$04,$04,$04,$04
.db $ff,$ff,$ff,$ff

.org $cdb6
palace_palette_offsets:
.db $00,$10,$20,$20,$30,$30,$30,$30,$40,$50,$60,$00,$10,$20,$30,$40

.org $cd72
        LDA palace_graphics_banks,Y
.org $ce32
        LDA palace_palette_offsets,Y

; Put the north/south frontier table in one of the newly freed areas (and erase
; the old one)
.org $cd3c
north_south_frontier:
.db $3c,$4b,$4c,$4c
.org $cb32
.db $ff,$ff,$ff
.org $cc14
        CMP north_south_frontier,Y

; Rewrite the area calculation routine from continent*5+world to
; continent*8+world
.org $cf35
        ASL
        NOP
        NOP
; Rewrite the item bitmap calculator, considering our previous change
.org $c2b6
        NOP
.org $c2bd
        LDA #$06
        NOP
; Rewrite the item presense pointer table from 16 pointers to 32 offsets
;
;    0   1   2   3   4   5   6   7
.org $c265
.db $00,$60,$60,$80,$a0,$c0,$80,$a0  ; West Hyrule
.db $20,$60,$60,$80,$a0,$c0,$80,$a0  ; DM, MZ, "third mountain/third island"
.db $40,$60,$60,$80,$a0,$c0,$80,$a0  ; East Hyrule
.db $40,$60,$60,$80,$a0,$c0,$80,$a0  ; Third Hyrule

; Update the two bits of code which check if you're in P7 to use the world code
.org $cad0
        LDA $0707
        CMP #$05
        BEQ #$07 ;[dest=cade]
.org $dd27
        LDA $0707
        CMP #$05
.end

######################################################################
# Enter assembly mode in bank 6 and fixup the world detection for
# deciting which music to play
######################################################################
asm b=6 0
.org $9bff
        CMP #$05
        BEQ #$3d ;[dest=9c40]
.org $bf8d
        LDA #$0f
.end
