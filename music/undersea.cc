#include "music.h"

#include <iostream>

void dump_notes(std::vector<z2music::Note> notes) {
  for (z2music::Note n : notes) {
    std::cout << n.pitch_string();
    size_t left = n.length() / 4 - 4;
    std::cout << std::string(left, '.');
  }
  std::cout << std::endl;
}

void dump_song(const z2music::Song& song) {
  std::cout << "Song length: " << song.sequence_length() << " phrases" << std::endl;

  for (size_t i = 0; i < song.sequence_length(); ++i) {
    const z2music::Pattern* p = song.at(i);
    dump_notes(p->notes(z2music::Pattern::Channel::Pulse1));
    dump_notes(p->notes(z2music::Pattern::Channel::Pulse2));
    dump_notes(p->notes(z2music::Pattern::Channel::Triangle));
    dump_notes(p->notes(z2music::Pattern::Channel::Noise));
    std::cout << std::endl;
  }
}

void set_overworld_intro(z2music::Song* intro) {
  intro->clear();

  intro->add_pattern({
      0x08,
      { 0xb0, 0xa8, 0xa2, 0x98, 0xa8, 0xa2, 0x98, 0x90, 0xa2, 0x98, 0x90, 0x8a, 0x98, 0x90, 0x8a, 0x84 },
      { 0x43, 0x43, 0x43, 0x43 },
      { 0x43, 0x43, 0x43, 0x43 },
      {},
      });

  intro->set_sequence({0});
}

void set_overworld_theme(z2music::Song* theme) {
  theme->clear();

  theme->add_pattern({
      0x28,
      { 0x8a, 0x98, 0xa2, 0x69, 0x82, 0x8a, 0x98, 0xa2, 0xe8, 0xb0, 0xe8, 0x8a, 0x98, 0xa2, 0x69, 0x82, 0x8a, 0x98, 0xa2, 0xe8, 0xb0, 0xa8, 0xb0 },
      { 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43 },
      { 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43 },
      { 0xc8, 0x88, 0x09, 0xc8 },
      });

  theme->add_pattern({
      0x28,
      { 0x86, 0x94, 0x9e, 0x67, 0x82, 0x86, 0x94, 0x9e, 0xe6, 0xac, 0xe6, 0x86, 0x94, 0x9e, 0x67, 0x82, 0x86, 0x94, 0x9e, 0xe6, 0xac, 0xa6, 0xac },
      { 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43 },
      { 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43 },
      { 0xc8, 0x88, 0x09, 0xc8 },
      });

  theme->add_pattern({
      0x28,
      { 0x71, 0xc2, 0xec, 0x37, 0x33, 0xec, 0x71, 0xc2, 0xec, 0x37, 0x33, 0xe8 },
      { 0x8a, 0x98, 0xa2, 0x69, 0x82, 0x8a, 0x98, 0xa2, 0xe8, 0xb0, 0xe8, 0x8a, 0x98, 0xa2, 0x69, 0x82, 0x8a, 0x98, 0xa2, 0xe8, 0xb0, 0xa8, 0xb0 },
      { 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94 },
      { 0xc8, 0x88, 0x09, 0xc8 },
      });

  theme->add_pattern({
      0x28,
      { 0x67, 0xc2, 0xe2, 0x27, 0x29, 0xec, 0x67, 0xc2, 0xe2, 0x67, 0x5f },
      { 0x8a, 0x98, 0xa2, 0x69, 0x82, 0x8a, 0x98, 0xa2, 0xe8, 0xb0, 0xe8, 0x8a, 0x98, 0xa2, 0x69, 0x82, 0x8a, 0x98, 0xa2, 0xe8, 0xb0, 0xa8, 0xb0 },
      { 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90 },
      { 0xc8, 0x88, 0x09, 0xc8 },
      });

  theme->add_pattern({
      0x28,
      { 0x82, 0xb2, 0xb2, 0xb2, 0x71, 0x82, 0xb2, 0xb2, 0xb2, 0xf0, 0xe8, 0x82, 0xb2, 0xb2, 0xb2, 0xf0, 0xe8, 0x27, 0x29, 0xec },
      { 0x8a, 0x98, 0xa2, 0x69, 0x82, 0x8a, 0x98, 0xa2, 0xe8, 0xb0, 0xe8, 0x8a, 0x98, 0xa2, 0x69, 0x82, 0x8a, 0x98, 0xa2, 0xe8, 0xb0, 0xa8, 0xb0 },
      { 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94 },
      { 0xc8, 0x88, 0x09, 0xc8 },
      });

  theme->add_pattern({
      0x28,
      { 0x63, 0xc2, 0xde, 0x23, 0x27, 0xe8, 0x63, 0xc2, 0xde, 0x63, 0x61 },
      { 0x8a, 0x98, 0xa2, 0x69, 0x82, 0x8a, 0x98, 0xa2, 0xe8, 0xb0, 0xe8, 0x8a, 0x98, 0xa2, 0x69, 0x82, 0x8a, 0x98, 0xa2, 0xe8, 0xb0, 0xa8, 0xb0 },
      { 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90 },
      { 0xc8, 0x88, 0x09, 0xc8 },
      });

  theme->set_sequence({0, 1, 2, 3, 2, 3, 4, 5, 2, 3, 2, 3, 4, 5});
}

int main(int argc, char** argv) {
  if (argc != 2) {
    std::cout << "Usage: " << argv[0] << " z2_rom" << std::endl;
    return 1;
  }

  const std::string file = std::string(argv[1]);

  z2music::Rom rom(file);

  // Change overworld music
  set_overworld_intro(rom.song(z2music::Rom::SongTitle::OverworldIntro));
  set_overworld_theme(rom.song(z2music::Rom::SongTitle::OverworldTheme));

  // Fix a bug in the vanilla game
  rom.write(0x5d6b, { 0xea, 0xea, 0xea });

  // Split the timbres of the pulse wave channels
  rom.write(0x19d34, { 0xa8, 0x9d });

  // Pulse 1 timbre
  rom.write(0x19135, {
      0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,
      0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9e,
      0x9f, 0x9e, 0x9c, 0x9a, 0x98, 0x96, 0x94, 0x92,
      });

  // Pulse 2 timbre
  rom.write(0x19da8, {
      0x90, 0x92, 0x91, 0x93, 0x92, 0x94, 0x92, 0x91,
      0x93, 0x95, 0x93, 0x91, 0x93, 0x96, 0x93, 0x91,
      0x94, 0x97, 0x94, 0x91, 0x94, 0x98, 0x94, 0x91,
      });

  rom.save("/tmp/output.nes");

  return 0;
}
