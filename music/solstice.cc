#include "music.h"

#include <iostream>

void dump_notes(std::vector<z2music::Note> notes) {
  for (z2music::Note n : notes) {
    std::cout << n.pitch_string();
    size_t left = n.length() / 4 - 4;
    std::cout << std::string(left, '.');
  }
  std::cout << std::endl;
}

void dump_song(const z2music::Song& song) {
  std::cout << "Song length: " << song.sequence_length() << " phrases" << std::endl;

  for (size_t i = 0; i < song.sequence_length(); ++i) {
    const z2music::Pattern* p = song.at(i);
    dump_notes(p->notes(z2music::Pattern::Channel::Pulse1));
    dump_notes(p->notes(z2music::Pattern::Channel::Pulse2));
    dump_notes(p->notes(z2music::Pattern::Channel::Triangle));
    dump_notes(p->notes(z2music::Pattern::Channel::Noise));
    std::cout << std::endl;
  }
}

int main(int argc, char** argv) {
  if (argc != 2) {
    std::cout << "Usage: " << argv[0] << " z2_rom" << std::endl;
    return 1;
  }

  const std::string file = std::string(argv[1]);

  z2music::Rom rom(file);
  z2music::Song* credits = rom.song(z2music::Rom::SongTitle::OverworldTheme);

  credits->clear();

  credits->add_pattern({
      // pulse1
      { 0x1b, 0x19, 0xd0,
        0x1b, 0x19, 0xd0,
        0x1f, 0x1b, 0xd8,
        0x1b, 0x19, 0xd0},

      // pulse2
      { 0xc2, 0xe8, 0xa8, 0x2d,
        0xc2, 0xe8, 0xa8, 0x2d,
        0xc2, 0xe8, 0xa8, 0x2d,
        0xf2, 0xf0, 0xec, 0xb0, 0xa8},

      // triangle
      { 0x90, 0xa8, 0x90, 0xa8, 0x90, 0x28, 0x90, 0x10, 0xa8,
        0x8a, 0xa2, 0x8a, 0xa2, 0x8a, 0x22, 0x8a, 0x0a, 0xa2,
        0x8c, 0xa4, 0x8c, 0xa4, 0x8c, 0x24, 0x8c, 0x0c, 0xa4,
        0x86, 0x9e, 0x86, 0x9e, 0x88, 0x20, 0x8a, 0x0a, 0xa2},

      // noise
      { 0x49, 0x49, 0x49, 0x48, 0x48, 0x88},
    });

  credits->add_pattern({
      // pulse1
      { 0x1b, 0x19, 0xd0,
        0x1b, 0x19, 0xd0,
        0x15, 0x19, 0xd0,
        0x15, 0x11, 0xce},

      // pulse2
      { 0xc2, 0xe8, 0xa8, 0x2d,
        0xc2, 0xe8, 0xa8, 0x2d,
        0xc2, 0xe8, 0xa8, 0x2d,
        0xf2, 0xec, 0xe6, 0xac, 0xa8},

      // triangle
      { 0x90, 0xa8, 0x90, 0xa8, 0x90, 0x28, 0x90, 0x10, 0xa8,
        0x8a, 0xa2, 0x8a, 0xa2, 0x8a, 0x22, 0x8a, 0x0a, 0xa2,
        0x8c, 0xa4, 0x8c, 0xa4, 0x8c, 0x24, 0x8c, 0x0c, 0xa4,
        0x86, 0x9e, 0x86, 0x9e, 0x88, 0x20, 0x8a, 0x0a, 0xa2},

      // noise
      { 0x49, 0x49, 0x49, 0x48, 0x48, 0x88},
  });

  credits->add_pattern({
      // pulse1
      { 0x1b, 0x19, 0xd0,
        0x1b, 0x19, 0xde,
        0x1b, 0x19, 0xd0,
        0xd4, 0xd8, 0xda, 0xd8},

      // pulse2
      { 0xc2, 0xe8, 0xa8, 0x2d,
        0xc2, 0xe8, 0xa8, 0x2d,
        0xc2, 0xe8, 0xa8, 0x2d,
        0xf2, 0xf0, 0xec, 0xb0, 0xa8},

      // triangle
      { 0x90, 0xa8, 0x90, 0xa8, 0x90, 0x28, 0x90, 0x10, 0xa8,
        0x8a, 0xa2, 0x8a, 0xa2, 0x8a, 0x22, 0x8a, 0x0a, 0xa2,
        0x8c, 0xa4, 0x8c, 0xa4, 0x8c, 0x24, 0x8c, 0x0c, 0xa4,
        0x86, 0x9e, 0x86, 0x9e, 0x88, 0x20, 0x8a, 0x0a, 0xa2},

      // noise
      { 0x49, 0x49, 0x49, 0x48, 0x48, 0x88},
    });

  credits->add_pattern({
      // pulse1
      { 0x1b, 0x19, 0xd0,
        0x1b, 0x19, 0xde,
        0x1b, 0x19, 0xd0,
        0xd4, 0xd0, 0xce, 0xd0},

      // pulse2
      { 0xc2, 0xe8, 0xa8, 0x2d,
        0xc2, 0xe8, 0xa8, 0x2d,
        0xc2, 0xe8, 0xa8, 0x2d,
        0xf2, 0xec, 0xe6, 0xac, 0xa8},

      // triangle
      { 0x90, 0xa8, 0x90, 0xa8, 0x90, 0x28, 0x90, 0x10, 0xa8,
        0x8a, 0xa2, 0x8a, 0xa2, 0x8a, 0x22, 0x8a, 0x0a, 0xa2,
        0x8c, 0xa4, 0x8c, 0xa4, 0x8c, 0x24, 0x8c, 0x0c, 0xa4,
        0x86, 0x9e, 0x86, 0x9e, 0x88, 0x20, 0x8a, 0x0a, 0xa2},

      // noise
      { 0x49, 0x49, 0x49, 0x48, 0x48, 0x88},
  });

  credits->set_sequence({0, 1, 0, 1, 2, 3});

  dump_song(*credits);

  rom.save("/tmp/output.nes");

  return 0;
}
